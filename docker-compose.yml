version: "1"

x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    profiles:
      - airflow
      - all
  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    profiles:
      - airflow
      - all

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "6060:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    profiles:
      - airflow
      - all

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    profiles:
      - airflow
      - all

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    profiles:
      - airflow
      - all

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    profiles:
      - airflow
      - all

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    profiles:
      - airflow
      - all

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
      - all

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
      - all
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  namenode:
    image: nghia294/hadoop-arm64:v6.0
    container_name: namenode
    hostname: namenode
    ports:
      - "8088:8088"
      - "9000:9000"
    env_file:
      - hadoop.env
    tty: true
    volumes:
      - hadoop_conf:/usr/local/hadoop/etc/hadoop
    profiles:
      - hadoop
      - hdp_spark
      - hdp_hive
      - test1
      - test2
      - test3
      - all

  datanode:
    image: nghia294/hadoop-arm64:v6.0
    container_name: datanode
    hostname: datanode
    tty: true
    env_file:
      - hadoop.env
    depends_on:
      - namenode
    profiles:
      - hadoop
      - hdp_spark
      - hdp_hive
      - test1
      - test2
      - test3
      - all

  spark-master:
    image: nghia294/spark-arm64:v6.0
    container_name: spark-master
    hostname: spark-master
    depends_on:
      - namenode
      - datanode
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SPARK_HOME=/opt/spark
      - HIVE_CONF_DIR=/opt/hive/conf
      - HIVE_METASTORE_URI="thrift://metastore:9083"
    volumes:
      - hadoop_conf:/opt/hadoop/etc/hadoop
      - spark_master_logs:/opt/spark/logs
      - ./spark/apps:/opt/spark-apps
      - ./spark/data:/opt/spark-data
      - ./hiveconf:/opt/hive/conf
      - ./sparkconfig:/opt/spark/conf
    profiles:
      - hdp_spark
      - test2
      - test3
      - all

  spark-worker-1:
    image: nghia294/spark-arm64:v6.0
    container_name: spark-worker
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKLOAD=worker
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
      - HIVE_CONF_DIR=/opt/hive/conf
      - HIVE_METASTORE_URI="thrift://metastore:9083"
    volumes:
      - hadoop_conf:/opt/hadoop/etc/hadoop
      - ./hiveconf:/opt/hive/conf
    profiles:
      - hdp_spark
      - test2
      - test3
      - all

  nifi:
    image: apache/nifi:1.27.0
    container_name: nifi
    hostname: nifi
    ports:
      - target: 8443
        published: 8443
        protocol: tcp
        mode: host
    volumes:
      - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./nifi/state:/opt/nifi/nifi-current/state
      - ./nifi/logs:/opt/nifi/nifi-current/logs
      - hadoop_conf:/opt/hadoop-3.2.1/etc/hadoop/
    environment:
      NIFI_WEB_HTTP_PORT: 8443
    profiles:
      - nifi
      - test1
      - test2
      - test3
      - all

  kafka:
    hostname: kafka
    image: bitnami/kafka:3.2
    container_name: kafka
    ports:
      - "9094:9094"
    env_file:
      - ./kafka.env
    profiles:
      - kafka
      - test1
      - test2
      - test3
      - all

  postgres-hive:
    image: postgres:13
    restart: unless-stopped
    container_name: hpostgres
    hostname: hpostgres
    environment:
      POSTGRES_DB: "metastore_db"
      POSTGRES_USER: "hive"
      POSTGRES_PASSWORD: "password"
    ports:
      - "5432:5432"
    volumes:
      - hive-db:/var/lib/postgresql
    profiles:
      - hdp_hive
      - test3
      - all

  metastore:
    image: apache/hive:4.0.0
    depends_on:
      - postgres-hive
    container_name: metastore
    hostname: metastore
    environment:
      DB_DRIVER: postgres
      SERVICE_NAME: "metastore"
      SERVICE_OPTS:
        "-Xmx1G -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://hpostgres:5432/metastore_db
        -Djavax.jdo.option.ConnectionUserName=hive
        -Djavax.jdo.option.ConnectionPassword=password"
    ports:
      - 9083
    volumes:
      - warehouse:/opt/hive/data/warehouse
      - type: bind
        source: ${POSTGRES_LOCAL_PATH}
        target: /opt/hive/lib/postgres.jar
      - ./hiveconf:/opt/hive/conf
    profiles:
      - hdp_hive
      - test3
      - all

  hiveserver2:
    image: apache/hive:4.0.0
    hostname: hiveserver2
    depends_on:
      - metastore
    container_name: hiveserver2
    environment:
      HIVE_SERVER2_THRIFT_PORT: 10000
      SERVICE_OPTS: "-Xmx1G -Dhive.metastore.uris=thrift://metastore:9083"
      IS_RESUME: "true"
      SERVICE_NAME: "hiveserver2"
      SERVICE_PRECONDITION: "metastore:9083"
      HIVE_METASTORE_URI: "thrift://metastore:9083"
    ports:
      - "10000:10000"
      - "10002:10002"
    volumes:
      - ./hiveconf:/opt/hive/conf
    profiles:
      - hdp_hive
      - test3
      - all

  presto:
    image: prestodb/presto:0.287
    container_name: presto
    ports:
      - "9090:8080"
    profiles:
      - presto

  # grafana:
  #   image: grafana/grafana:10.2.3-ubuntu
  #   container_name: grafana
  #   ports:
  #     - 3000:3000
  #   profiles:
  #     - grafana
  #     - test1
  redpanda:
    image: redpandadata/console:v2.7.1
    container_name: redpanda
    depends_on:
      - kafka
    ports:
      - 1010:8080
    environment:
      - KAFKA_BROKERS=kafka:9094
    profiles:
      - redpanda
      - test1
      - kafka
      - test2
      - test3
      - all

  jupyterlab:
    image: jupyter/pyspark-notebook:python-3.11.6
    container_name: notebook
    ports:
      - 9999:8888
    volumes:
      - ./notebook:/opt/workspace
      - hadoop_conf:/opt/hadoop-3.2.1/etc/hadoop/
      - spark_home:/spark
    profiles:
      - test3
      - all

volumes:
  postgres-db-volume:
  spark_home:
  hadoop_conf:
  spark_master_logs:
  hive-db:
  warehouse:
